"""
Django settings for vision_control project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import enum
import uuid
from pathlib import Path

import git
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

environment = environ.Env()
environ.Env.read_env(BASE_DIR / ".env")

GIT_REVISION = environment.str("GIT_REVISION", default=None)
if not GIT_REVISION:
    try:
        repository = git.repo.Repo(BASE_DIR.parent)
        GIT_REVISION = repository.git.describe("--always", "--tags", "--dirty")
    except git.exc.InvalidGitRepositoryError:
        GIT_REVISION = "(unknown)"

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environment.str(
    "SECRET_KEY",
    default="django-insecure-(19l&*=hkp8pbfiqh1%s839xzv+5y60=n7de&f*0zx=0!%%#fy",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = environment.bool("DEBUG", default=True)
ALLOWED_HOSTS = environment.list("ALLOWED_HOSTS", default=[])

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "api.apps.ApiConfig",
    "hooks.apps.HooksConfig",
    "colorlog",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "vision_control.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "vision_control.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/


TIME_ZONE = environment.str("TIME_ZONE", default="UTC")

LANGUAGE_CODE = environment.str("LANGUAGE_CODE", default="en-us")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {"require_debug_true": {"()": "django.utils.log.RequireDebugTrue"}},
    "formatters": {
        "api": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(bold_white)s%(asctime)s%(reset)s%(log_color)s [api.%(module)s]%(reset)s %(blue)s%(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
            "log_colors": {
                "DEBUG": "purple",
                "INFO": "green",
                "WARNING": "yellow",
                "ERROR": "red",
                "CRITICAL": "red,bg_white",
            },
            "style": "%",
        },
        "hooks": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(bold_white)s%(asctime)s%(reset)s%(log_color)s [hooks.%(module)s]%(reset)s %(blue)s%(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
            "log_colors": {
                "DEBUG": "purple",
                "INFO": "green",
                "WARNING": "yellow",
                "ERROR": "red",
                "CRITICAL": "red,bg_white",
            },
            "style": "%",
        },
    },
    "handlers": {
        "api_console_handler": {
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "api",
        },
        "hooks_console_handler": {
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "hooks",
        },
    },
    "loggers": {
        "api": {
            "handlers": ["api_console_handler"],
            "level": environment.str("DJANGO_LOG_LEVEL", default="INFO"),
        },
        "hooks": {
            "handlers": ["hooks_console_handler"],
            "level": environment.str("DJANGO_LOG_LEVEL", default="INFO"),
        },
    },
}

GITLAB_URL = environment("GITLAB_URL", default="")
MIDDLEWARE_URL = environment("MIDDLEWARE_URL", default="")
GITLAB_ACCESS_TOKEN = environment("GITLAB_ACCESS_TOKEN", default="")
GITLAB_PROJECT_IDS = environment.list("GITLAB_PROJECT_IDS", default="", cast=int)
GITLAB_DEFAULT_PROJECT = environment.int("GITLAB_DEFAULT_PROJECT", default=0)
GRAFANA_URL = environment("GRAFANA_URL", default="")
GRAFANA_ACCESS_TOKEN = environment("GRAFANA_ACCESS_TOKEN", default="")
GITLAB_SECRET_TOKEN = str(uuid.uuid4())
